/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
#tFSMC_NORSRAM_TimingTypeDef Timing;
#n
#t/** Perform the SRAM1 memory initialization sequence#n#t*/
#thsram1.Instance = FSMC_NORSRAM_DEVICE;
#thsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
#t/* hsram1.Init */
#thsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
#thsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
#thsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
#thsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
#thsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
#thsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
#thsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
#thsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
#thsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
#thsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
#thsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
#thsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
#thsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
#thsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
#t/* Timing */
#tTiming.AddressSetupTime = 5;
#tTiming.AddressHoldTime = 15;
#tTiming.DataSetupTime = 9;
#tTiming.BusTurnAroundDuration = 0;
#tTiming.CLKDivision = 16;
#tTiming.DataLatency = 17;
#tTiming.AccessMode = FSMC_ACCESS_MODE_A;
#t/* ExtTiming */
#n
#tif (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
#t{
#t#t_Error_Handler(__FILE__, __LINE__);
#t}
#n
}
